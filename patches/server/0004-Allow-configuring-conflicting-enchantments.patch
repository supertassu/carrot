From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Taavi=20V=C3=A4=C3=A4n=C3=A4nen?= <hi@tassu.me>
Date: Thu, 5 Nov 2020 09:40:39 +0200
Subject: [PATCH] Allow configuring conflicting enchantments


diff --git a/src/main/java/net/minecraft/server/Enchantment.java b/src/main/java/net/minecraft/server/Enchantment.java
index 7e2162fc7..24bd9b80d 100644
--- a/src/main/java/net/minecraft/server/Enchantment.java
+++ b/src/main/java/net/minecraft/server/Enchantment.java
@@ -68,6 +68,17 @@ public abstract class Enchantment {
     }
 
     protected boolean a(Enchantment enchantment) {
+        // Carrot start
+        return this.canAccept(enchantment);
+    }
+
+    protected boolean canAccept(Enchantment enchantment) {
+        java.util.Set<Enchantment> conflicting = wtf.taavi.carrot.server.RealCarrot.getInstance().getConfig().conflictingEnchantments.get(this);
+        if (conflicting != null && conflicting.contains(enchantment)) {
+            return false;
+        }
+        // Carrot end
+
         return this != enchantment;
     }
 
diff --git a/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java b/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
index 176be2e4d..f204531f4 100644
--- a/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
+++ b/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
@@ -65,6 +65,6 @@ public class EnchantmentFrostWalker extends Enchantment {
 
     @Override
     public boolean a(Enchantment enchantment) {
-        return super.a(enchantment) && enchantment != Enchantments.DEPTH_STRIDER;
+        return super.a(enchantment)/* && enchantment != Enchantments.DEPTH_STRIDER*/; // Carrot - handled by configuration and super
     }
 }
diff --git a/src/main/java/net/minecraft/server/EnchantmentInfiniteArrows.java b/src/main/java/net/minecraft/server/EnchantmentInfiniteArrows.java
index 408cfa460..2e2012aea 100644
--- a/src/main/java/net/minecraft/server/EnchantmentInfiniteArrows.java
+++ b/src/main/java/net/minecraft/server/EnchantmentInfiniteArrows.java
@@ -23,6 +23,6 @@ public class EnchantmentInfiniteArrows extends Enchantment {
 
     @Override
     public boolean a(Enchantment enchantment) {
-        return enchantment instanceof EnchantmentMending ? false : super.a(enchantment);
+        return /* enchantment instanceof EnchantmentMending ? false : */ super.a(enchantment); // Carrot - handled by configuration and super
     }
 }
diff --git a/src/main/java/net/minecraft/server/EnchantmentLootBonus.java b/src/main/java/net/minecraft/server/EnchantmentLootBonus.java
index b5232facc..cfd4f7482 100644
--- a/src/main/java/net/minecraft/server/EnchantmentLootBonus.java
+++ b/src/main/java/net/minecraft/server/EnchantmentLootBonus.java
@@ -23,6 +23,6 @@ public class EnchantmentLootBonus extends Enchantment {
 
     @Override
     public boolean a(Enchantment enchantment) {
-        return super.a(enchantment) && enchantment != Enchantments.SILK_TOUCH;
+        return super.a(enchantment)/* && enchantment != Enchantments.SILK_TOUCH*/; // Carrot - handled by configuration and super
     }
 }
diff --git a/src/main/java/net/minecraft/server/EnchantmentMultishot.java b/src/main/java/net/minecraft/server/EnchantmentMultishot.java
index 6f423e753..0725aae02 100644
--- a/src/main/java/net/minecraft/server/EnchantmentMultishot.java
+++ b/src/main/java/net/minecraft/server/EnchantmentMultishot.java
@@ -23,6 +23,6 @@ public class EnchantmentMultishot extends Enchantment {
 
     @Override
     public boolean a(Enchantment enchantment) {
-        return super.a(enchantment) && enchantment != Enchantments.PIERCING;
+        return super.a(enchantment)/* && enchantment != Enchantments.PIERCING*/; // Carrot - handled by configuration and super
     }
 }
diff --git a/src/main/java/wtf/taavi/carrot/server/RealCarrot.java b/src/main/java/wtf/taavi/carrot/server/RealCarrot.java
index 49592c818..e49fa85d8 100644
--- a/src/main/java/wtf/taavi/carrot/server/RealCarrot.java
+++ b/src/main/java/wtf/taavi/carrot/server/RealCarrot.java
@@ -2,6 +2,8 @@ package wtf.taavi.carrot.server;
 
 import net.minecraft.server.LocaleLanguage;
 import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
+import org.bukkit.enchantments.Enchantment;
 import wtf.taavi.carrot.api.Carrot;
 
 public class RealCarrot implements Carrot {
@@ -30,4 +32,9 @@ public class RealCarrot implements Carrot {
 	public void registerCommands() {
 
 	}
+
+	@Override
+	public boolean doEnchantmentsConflict(Enchantment first, Enchantment second) {
+		return !((CraftEnchantment) first).getHandle().isCompatible(((CraftEnchantment) second).getHandle());
+	}
 }
diff --git a/src/main/java/wtf/taavi/carrot/server/RealCarrotConfig.java b/src/main/java/wtf/taavi/carrot/server/RealCarrotConfig.java
index 99ec21ffc..b9204bfab 100644
--- a/src/main/java/wtf/taavi/carrot/server/RealCarrotConfig.java
+++ b/src/main/java/wtf/taavi/carrot/server/RealCarrotConfig.java
@@ -1,5 +1,10 @@
 package wtf.taavi.carrot.server;
 
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
+import net.minecraft.server.Enchantment;
+import net.minecraft.server.IRegistry;
+import net.minecraft.server.MinecraftKey;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
@@ -10,7 +15,11 @@ import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 import java.util.logging.Level;
+import java.util.stream.Collectors;
 
 public class RealCarrotConfig implements CarrotConfig {
 	private static String HEADER = "carrot.yml";
@@ -75,4 +84,34 @@ public class RealCarrotConfig implements CarrotConfig {
 	public int getConfigVersion() {
 		return this.config.getInt("config-version", CONFIG_VERSION);
 	}
+
+	private static final Map<String, List<String>> DEFAULT_CONFLICTING_ENCHANTMENTS = ImmutableMap.<String, List<String>>builder()
+			.put("ARROW_INFINITE", Lists.newArrayList("MENDING"))
+			.put("FROST_WALKER", Lists.newArrayList("DEPTH_STRIDER"))
+			.put("FORTUNE", Lists.newArrayList("SILK_TOUCH"))
+			.put("RIPTIDE", Lists.newArrayList("LOYALTY", "CHANNELING"))
+			.put("MULTISHOT", Lists.newArrayList("PIERCING"))
+			.build();
+
+	private Map<Enchantment, Set<Enchantment>> convertConflictingEnchantments(Map<String, List<String>> in) {
+		return in.entrySet()
+				.stream()
+				.collect(Collectors.toMap(
+						it -> IRegistry.ENCHANTMENT.get(new MinecraftKey(it.getKey().toLowerCase())),
+						it -> it.getValue().stream().map(value -> IRegistry.ENCHANTMENT.get(new MinecraftKey(value.toLowerCase()))).collect(Collectors.toSet())
+				));
+	}
+
+	public Map<Enchantment, Set<Enchantment>> conflictingEnchantments = convertConflictingEnchantments(DEFAULT_CONFLICTING_ENCHANTMENTS);
+	private void processConflictingEnchantments() {
+		this.config.addDefault("enchants.conflicting", DEFAULT_CONFLICTING_ENCHANTMENTS);
+
+		Map<String, List<String>> valuesFromConfig = this.config.getConfigurationSection("enchants.conflicting")
+				.getValues(false)
+				.entrySet()
+				.stream()
+				.collect(Collectors.toMap(Map.Entry::getKey, it -> (List<String>) it.getValue()));
+		this.conflictingEnchantments = this.convertConflictingEnchantments(valuesFromConfig);
+		System.out.print(this.conflictingEnchantments);
+	}
 }
