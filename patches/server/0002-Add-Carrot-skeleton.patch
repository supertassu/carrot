From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Taavi=20V=C3=A4=C3=A4n=C3=A4nen?= <hi@tassu.me>
Date: Wed, 4 Nov 2020 15:36:08 +0200
Subject: [PATCH] Add Carrot skeleton


diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 5504facd2..c9d7132dc 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -169,6 +169,15 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         com.destroystokyo.paper.PaperConfig.registerCommands();
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         // Paper end
+        // Carrot start
+        try {
+            wtf.taavi.carrot.server.RealCarrot.getInstance().getConfig().init((java.io.File) options.valueOf("carrot-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load carrot configuration", e);
+            return false;
+        }
+        wtf.taavi.carrot.server.RealCarrot.getInstance().registerCommands();
+        // Carrot end
 
         this.setPVP(dedicatedserverproperties.pvp);
         this.setAllowFlight(dedicatedserverproperties.allowFlight);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d48a22178..a9a81a0e5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -73,7 +73,6 @@ import net.minecraft.server.GameRules;
 import net.minecraft.server.GeneratorSettings;
 import net.minecraft.server.IRecipe;
 import net.minecraft.server.IRegistry;
-import net.minecraft.server.IRegistryCustom;
 import net.minecraft.server.Item;
 import net.minecraft.server.ItemWorldMap;
 import net.minecraft.server.Items;
@@ -288,6 +287,10 @@ public final class CraftServer implements Server {
 
         Bukkit.setServer(this);
 
+        // Carrot start
+        Bukkit.setCarrot(wtf.taavi.carrot.server.RealCarrot.getInstance());
+        // Carrot end
+
         // Register all the Enchantments and PotionTypes now so we can stop new registration immediately after
         Enchantments.DAMAGE_ALL.getClass();
         org.bukkit.enchantments.Enchantment.stopAcceptingRegistrations();
@@ -856,6 +859,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
+        wtf.taavi.carrot.server.RealCarrot.getInstance().getConfig().init((File) console.options.valueOf("carrot-settings")); // Carrot
         for (WorldServer world : console.getWorlds()) {
             world.worldDataServer.setDifficulty(config.difficulty);
             world.setSpawnFlags(config.spawnMonsters, config.spawnAnimals);
@@ -908,6 +912,7 @@ public final class CraftServer implements Server {
         reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
+        wtf.taavi.carrot.server.RealCarrot.getInstance().registerCommands(); // Carrot
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
         ignoreVanillaPermissions = commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 9118f0542..735ffa61c 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -139,6 +139,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Paper end
 
+                // Carrot start
+                acceptsAll(asList("carrot", "carrot-settings"), "File for carrot settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("carrot.yml"))
+                        .describedAs("Yml file");
+                // Carrot end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/wtf/taavi/carrot/server/RealCarrot.java b/src/main/java/wtf/taavi/carrot/server/RealCarrot.java
new file mode 100644
index 000000000..2c49c5fc6
--- /dev/null
+++ b/src/main/java/wtf/taavi/carrot/server/RealCarrot.java
@@ -0,0 +1,23 @@
+package wtf.taavi.carrot.server;
+
+import org.bukkit.Bukkit;
+import wtf.taavi.carrot.api.Carrot;
+
+public class RealCarrot implements Carrot {
+	private static RealCarrot instance = new RealCarrot();
+
+	public static RealCarrot getInstance() {
+		return instance;
+	}
+
+	private final RealCarrotConfig config = new RealCarrotConfig();
+
+	@Override
+	public RealCarrotConfig getConfig() {
+		return this.config;
+	}
+
+	public void registerCommands() {
+
+	}
+}
diff --git a/src/main/java/wtf/taavi/carrot/server/RealCarrotConfig.java b/src/main/java/wtf/taavi/carrot/server/RealCarrotConfig.java
new file mode 100644
index 000000000..99ec21ffc
--- /dev/null
+++ b/src/main/java/wtf/taavi/carrot/server/RealCarrotConfig.java
@@ -0,0 +1,78 @@
+package wtf.taavi.carrot.server;
+
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import wtf.taavi.carrot.api.CarrotConfig;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.logging.Level;
+
+public class RealCarrotConfig implements CarrotConfig {
+	private static String HEADER = "carrot.yml";
+	private static final int CONFIG_VERSION = 1;
+
+	private File file;
+	private YamlConfiguration config;
+
+	public void init(File file) {
+		this.file = file;
+		this.reload();
+	}
+
+	public void reload() {
+		this.config = new YamlConfiguration();
+
+		if (this.file.exists()) {
+			try {
+				this.config.load(this.file);
+			} catch (IOException ex) {
+				Bukkit.getLogger().log(Level.SEVERE, "Could not load carrot.yml, please check file permissions and other details", ex);
+				throw new RuntimeException(ex);
+			} catch (InvalidConfigurationException ex) {
+				Bukkit.getLogger().log(Level.SEVERE, "Could not load carrot.yml, please correct your syntax errors", ex);
+				throw new RuntimeException(ex);
+			}
+		} else {
+			Bukkit.getLogger().warning("carrot.yml does not exist, creating");
+		}
+
+		this.config.options().header(HEADER);
+		this.config.options().copyDefaults(true);
+
+		this.config.addDefault("config-version", CONFIG_VERSION);
+
+		if (this.getConfigVersion() != CONFIG_VERSION) {
+			Bukkit.getLogger().warning("carrot.yml version " + this.getConfigVersion() + " does not match expected " + CONFIG_VERSION);
+		}
+
+		for (Method method : getClass().getDeclaredMethods()) {
+			if (Modifier.isPrivate(method.getModifiers()) && method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE && method.getName().startsWith("process")) {
+				try {
+					method.setAccessible(true);
+					method.invoke(this);
+				} catch (InvocationTargetException ex) {
+					throw new RuntimeException(ex);
+				} catch (Exception ex) {
+					Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+				}
+			}
+		}
+
+		try {
+			this.config.save(this.file);
+		} catch (IOException ex) {
+			Bukkit.getLogger().log(Level.SEVERE, "Could not save carrot.yml, please check file permissions and other details", ex);
+			throw new RuntimeException(ex);
+		}
+	}
+
+
+	public int getConfigVersion() {
+		return this.config.getInt("config-version", CONFIG_VERSION);
+	}
+}
