#!/usr/bin/env bash

# get base dir regardless of execution location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SOURCE=$([[ "$SOURCE" == /* ]] && echo "$SOURCE" || echo "$PWD/${SOURCE#./}")
basedir=$(dirname "$SOURCE")
. "$basedir"/scripts/init.sh

carrotstash() {
  STASHED=$(git stash)
}

carrotunstash() {
  if [[ "$STASHED" != "No local changes to save" ]]; then
    git stash pop
  fi
}

case "$1" in
"p" | "patch" | "apply")
  (
    set -e
    cd "$basedir"
    scripts/apply.sh "$basedir"
  )
  ;;
"b" | "bu" | "build")
  (
    basedir
    mvn -N install
    cd Carrot-API
    mvn -e clean install
    cd ../Paper/Paper-MojangAPI
    mvn -e clean install
    cd ../../Carrot-Server
    mvn -e clean install
  )
  ;;

"rb" | "rbp" | "rebuild")
  (
    set -e
    cd "$basedir"
    scripts/rebuildpatches.sh "$basedir"
  )
  ;;
"am" | "amend")
  (
    cd "$basedir"/Carrot-API/
    git add .
    git commit --amend --no-edit
    cd "$basedir"/Carrot-Server/
    git add .
    git commit --amend --no-edit
    cd "$basedir"
    scripts/rebuildpatches.sh "$basedir"
  )
  ;;
"up" | "upstream")
  (
    cd "$basedir"
    scripts/upstream.sh "$2"
  )
  ;;
"jar" | "carrotclip")
  (
    set -e
    basedir
    cd "$basedir"
    if [ "$2" != "fast" ]; then
      scripts/upstream.sh
    fi
    ./scripts/apply.sh "$basedir"
    cd "$basedir"
    mvn -N install
    cd Carrot-API
    mvn -e clean install
    cd ../Paper/Paper-MojangAPI
    mvn -e clean install
    cd ../../Carrot-Server
    mvn -e clean install
    cd "$basedir"
    ./scripts/carrotclip.sh
  )
  ;;
  "setup")
    if [[ -f ~/.bashrc ]] ; then
        NAME="carrot"
        if [[ ! -z "${2+x}" ]] ; then
            NAME="$2"
        fi
        (grep "alias $NAME=" ~/.bashrc > /dev/null) && (sed -i "s|alias $NAME=.*|alias $NAME='. $SOURCE'|g" ~/.bashrc) || (echo "alias $NAME='. $SOURCE'" >> ~/.bashrc)
        alias "$NAME=. $SOURCE"
        echo "You can now just type '$NAME' at any time to access the carrot tool."
    fi
  ;;
*)
  echo "Carrot build tool command. This provides a variety of commands to build and manage the Carrot build"
  echo "environment. For all of the functionality of this command to be available, you must first run the"
  echo "'setup' command. View below for details. For essential building and patching, you do not need to do the setup."
  echo ""
  echo " Normal commands:"
  echo "  * p, patch        | Apply all patches to top of Paper without building it"
  echo "  * b, build        | Build Carrot API and Server"
  echo "  * rb, rebuild     | Rebuild patches"
  echo "  * am, amend       | Amend current edits to last patches"
  echo "  * up, upstream    | Build Paper upstream, pass arg up to update paper"
  echo "  * jar, carrotclip | Apply all patches and build the project, carrotclip.jar will be output"
  echo "  * setup           | Add an alias to .bashrc to allow full functionality of this script. Run as:"
  echo "                    |     . ./carrot setup"
  echo "                    | After you run this command you'll be able to just run 'carrot' from anywhere."
  echo "                    | The default name for the resulting alias is 'carrot', you can give an argument"
  echo "                    | to override this default, such as:"
  echo "                    |     . ./carrot setup example"
  echo "                    | Which will allow you to run 'example' instead."
  ;;
esac

unset -f carrotstash
unset -f carrotunstash